package sample;

import javafx.beans.value.ChangeListener;
import javafx.fxml.FXML;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextArea;
import javafx.scene.control.ToggleButton;
import javafx.util.StringConverter;
import sample.enums.DataBits;
import sample.enums.Parity;
import sample.enums.StopBits;
import sample.enums.BoundRate;
import jssc.*;

import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import java.awt.*;


public class Controller {
    @FXML
    private ComboBox<String> availablePorts;
    @FXML
    private ComboBox<BoundRate> availableBaudRate;
    @FXML
    private ComboBox<Parity> availableParity;
    @FXML
    private ComboBox<StopBits> availableStopBits;
    @FXML
    private ComboBox<DataBits> availableDataBits;
    @FXML
    private TextArea debugArea;
    @FXML
    private TextArea inputArea;
    @FXML
    private TextArea outputArea;
    @FXML
    private ToggleButton connectButton;

    private ChangeListener<String> listener = (observable, oldValue, newValue) -> {
        sendMessage(oldValue, newValue);
    };

    private PortReader portReader = new PortReader();

    private SerialPort serialPort;

    @FXML
    public void initialize() {
        availablePorts.getItems().addAll(SerialPortList.getPortNames());
        availablePorts.setConverter(new StringConverter<String>() {
            @Override
            public String toString(String object) {
                return object;
            }

            @Override
            public String fromString(String string) {
                return null;
            }
        });

        availableDataBits.getItems().addAll(DataBits.values());
        availableDataBits.setConverter(new StringConverter<DataBits>() {
            @Override
            public String toString(DataBits object) {
                return String.valueOf(object.getValue());
            }

            @Override
            public DataBits fromString(String string) {
                return null;
            }
        });

        availableBaudRate.getItems().addAll(BoundRate.values());
        availableBaudRate.setConverter(new StringConverter<BoundRate>() {
            @Override
            public String toString(BoundRate object) {
                return String.valueOf(object.getValue());
            }

            @Override
            public BoundRate fromString(String string) {
                return null;
            }
        });

        availableStopBits.getItems().addAll(StopBits.values());
        availableStopBits.setConverter(new StringConverter<StopBits>() {
            @Override
            public String toString(StopBits object) {
                return object.getName();
            }

            @Override
            public StopBits fromString(String string) {
                return null;
            }
        });

        availableParity.getItems().addAll(Parity.values());
        availableParity.setConverter(new StringConverter<Parity>() {
            @Override
            public String toString(Parity object) {
                return object.getName();
            }

            @Override
            public Parity fromString(String string) {
                return null;
            }
        });

        inputArea.setDisable(true);
    }

    public boolean paramsIsCorrect() {
        if (availableParity.getValue() == null || availableStopBits.getValue() == null ||
                availableDataBits.getValue() == null || availableBaudRate.getValue() == null ||
                availablePorts.getValue() == null) {
            printDebug("You selected only a few options. Please choose all parameters.");
            return false;
        }

        if (availableStopBits.getValue().equals(StopBits.STOP_BITS_2) &&
                availableDataBits.getValue().equals(DataBits.DATA_BITS_5)) {
            printDebug("Wrong choise: if you choose 2 stop bits you can't use 5 data bits.");
            return false;
        }


        if (availableStopBits.getValue().equals(StopBits.STOP_BITS_1_5) &&
                !availableDataBits.getValue().equals(DataBits.DATA_BITS_5)) {
            printDebug("Wrong choise: if you choose 1.5 stop bits you can use only 5 data bits.");
            return false;
        }

        return true;
    }

    void printDebug(String message) {
        String text = debugArea.getText().concat(message).concat("\n");
        debugArea.setText(text);
        debugArea.setScrollTop(Double.MAX_VALUE);
    }

    void disconnectFromPort() throws SerialPortException {
        serialPort.removeEventListener();
        serialPort.closePort();
        //serialPort = null;
    }

    @FXML
    public void connectToPortAction() {
        if (connectButton.getText().equals("Disconnect")) {
            try {
                disconnectFromPort();

                availablePorts.setDisable(false);
                availableBaudRate.setDisable(false);
                availableParity.setDisable(false);
                availableStopBits.setDisable(false);
                availableDataBits.setDisable(false);
                connectButton.setSelected(false);
                outputArea.clear();
                inputArea.textProperty().removeListener(listener);
                inputArea.clear();
                inputArea.setDisable(true);

                connectButton.setText("Connect");

                printDebug("Port is disconnected.");

                return;
            } catch (SerialPortException e) {
                printDebug("Failed disconnection from port.");
                return;
            }
        }
        if (!paramsIsCorrect()) {
            printDebug("All the parameters wasn't set.");
            connectButton.setSelected(false);
            return;
        }
        try {
            serialPort = new SerialPort(availablePorts.getValue());

            serialPort.openPort();

            serialPort.setParams(availableBaudRate.getValue().getValue(),
                    availableDataBits.getValue().getValue(),
                    availableStopBits.getValue().getValue(),
                    availableParity.getValue().getValue());
            printDebug("Parameters have been set.");

            serialPort.setFlowControlMode(SerialPort.FLOWCONTROL_RTSCTS_IN |
                    SerialPort.FLOWCONTROL_RTSCTS_OUT);
            serialPort.addEventListener(portReader, SerialPort.MASK_RXCHAR);

            inputArea.textProperty().addListener(listener);

            connectButton.setText("Disconnect");
            connectButton.setSelected(false);

            availablePorts.setDisable(true);
            availableBaudRate.setDisable(true);
            availableParity.setDisable(true);
            availableStopBits.setDisable(true);
            availableDataBits.setDisable(true);
            inputArea.setDisable(false);
            printDebug("Port is connected.");
        } catch (SerialPortException ex) {
            printDebug("Failed to connect to port.");
            connectButton.setSelected(false);
        }
    }

    private class PortReader implements SerialPortEventListener {
        @Override
        public void serialEvent(SerialPortEvent event) {
            if (event.isERR()) {
                printDebug("Error with parameters of COM ports.");
                return;
            }
            if (event.isRXCHAR() && event.getEventValue() > 0) {
                try {
                    String bytes = serialPort.readString(event.getEventValue());
                    if (bytes.equals("\b")) {
                        if (outputArea.getText().length() > 1)
                            outputArea.setText(outputArea.getText(0, outputArea.getText().length() - 1));
                        else outputArea.clear();
                    } else
                        outputArea.appendText(bytes);
                } catch (SerialPortException e) {
                    e.printStackTrace();
                    printDebug("Cannot read message: serialEvent(SerialPortEvent event).");
                }
            }
        }

    }

    private void sendMessage(String oldValue, String newValue) {
        String message;
        if (newValue.length() > oldValue.length()) {
            if (inputArea.getCaretPosition() != inputArea.getText().length() - 1) return;
            message = newValue.substring(newValue.length() - 1);
        } else message = "\b";
        try {
            serialPort.writeBytes(message.getBytes());
        } catch (SerialPortException ex) {
            printDebug("Error sending message.");
        }
    }

}
